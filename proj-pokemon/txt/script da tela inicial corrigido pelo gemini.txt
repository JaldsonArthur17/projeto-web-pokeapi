document.addEventListener('DOMContentLoaded', () => {

    //lista
    const pokemonListElement = document.getElementById('lista_pokemons');

    //busca
    const searchInput = document.getElementById('pesquisa');
    const searchButton = document.getElementById('botao_pesquisa');

    //botao de filtragem e favoritos
    const favoriteFilterButton = document.getElementById('botao_favoritar');

    //mensagem de status
    const statusMessage = document.getElementById('mensagem_status');

    //bot√µes de pagin√ß√£o
    const prevButton = document.getElementById('botao_anterior');
    const nextButton = document.getElementById('botao_posterior');

    //modais de detalhes
    const detailsModal = document.getElementById('detalhes_modal');
    const pokemonDetailsElement = document.getElementById('detalhes_pokemon');
    
    // CORRE√á√ÉO 1: Sele√ß√£o do bot√£o de fechar (mantida)
    const closeButton = document.querySelector('.close-button');

    //variaveis de estado
    [cite_start]// <-- CORRE√á√ÉO 2: Endpoint base correto (como no PDF [cite: 8])
    const POKEAPI_BASE_URL = 'https://pokeapi.co/api/v2/pokemon';
    const POKEMON_LIMIT = 20;
    let currentOffset = 0;
    let isFilteringFavorites = false; [cite_start]// Controla o Requisito 6 [cite: 16]

    // --- Fun√ß√µes Auxiliares (Requisito 7) ---

    // CORRE√á√ÉO 3: Fun√ß√µes movidas para o escopo principal (mantida)
    function showMessage(text, type = 'carregando') {
        statusMessage.textContent = text;
        statusMessage.style.display = 'block';
        // (Voc√™ pode adicionar classes CSS para 'erro' ou 'nenhum-resultado' aqui)
    }

    function hideMessage() {
        statusMessage.style.display = 'none';
    }

    [cite_start]// --- Fun√ß√µes de Favoritos (Requisito 5) [cite: 15] ---
    
    // <-- CORRE√á√ÉO 4: Implementa√ß√£o da l√≥gica de favoritar (localStorage)
    function getFavorites() {
        const favorites = localStorage.getItem('pokemonFavorites');
        return favorites ? JSON.parse(favorites) : [];
    }

    function saveFavorites(favorites) {
        localStorage.setItem('pokemonFavorites', JSON.stringify(favorites));
    }

    function isFavorite(id) {
        // Converte IDs para n√∫mero para compara√ß√£o
        return getFavorites().map(Number).includes(Number(id));
    }

    function toggleFavorite(id) {
        let favorites = getFavorites().map(Number);
        const numId = Number(id);
        const index = favorites.indexOf(numId);

        if (index > -1) {
            favorites.splice(index, 1); // Remove
        } else {
            favorites.push(numId); // Adiciona
        }
        saveFavorites(favorites);

        // Atualiza a lista se estivermos filtrando favoritos
        if (isFilteringFavorites) {
            loadPokemon();
        }
    }


    // --- Fun√ß√µes Principais de Renderiza√ß√£o ---

    /**
     * Busca os detalhes de um Pok√©mon espec√≠fico (necess√°rio para os cards e o modal)
     * (Requisito 4) [cite_start][cite: 10]
     */
    async function fetchPokemonDetails(urlOrName) {
        const url = `${POKEAPI_BASE_URL}/${urlOrName}`;
        try {
            const response = await fetch(url);
            if (!response.ok) throw new Error('Pok√©mon n√£o encontrado.');
            const data = await response.json();
            
            [cite_start]// Retorna os dados necess√°rios para o Req 4 [cite: 10, 11, 12, 13, 14]
            return {
                id: data.id,
                name: data.name,
                image: data.sprites.front_default || 'url_imagem_padrao.png',
                types: data.types.map(typeInfo => typeInfo.type.name),
                height: data.height / 10, // Convertendo para metros
                weight: data.weight / 10, // Convertendo para kg
            };
        } catch (error) {
            console.error('Erro ao buscar detalhes:', error);
            [cite_start]// Requisito 7 [cite: 17]
            showMessage('Pok√©mon n√£o encontrado. Verifique o nome.', 'erro');
            return null;
        }
    }

    /**
     * Cria o HTML de um card de Pok√©mon e o adiciona √† lista
     */
    function renderPokemonCard(pokemon) {
        const fav = isFavorite(pokemon.id);
        
        const card = document.createElement('div');
        card.className = 'card_pokemon';
        card.dataset.id = pokemon.id; // Para o clique (Req 4)
        
        card.innerHTML = `
            <button class="botao_favoritar_card ${fav ? 'is-favorite' : ''}" data-id="${pokemon.id}">
                ${fav ? '‚ù§Ô∏è' : 'ü§ç'}
            </button>
            <img src="${pokemon.image}" alt="${pokemon.name}">
            <h3>#${pokemon.id} - ${pokemon.name.toUpperCase()}</h3>
            <p>Tipo: ${pokemon.types.join(', ')}</p>
        `;
        pokemonListElement.appendChild(card);
    }

    /**
     * [cite_start]Mostra os detalhes do Pok√©mon no modal (Requisito 4) [cite: 10, 11, 12, 13, 14]
     */
    async function showPokemonDetails(id) {
        const pokemon = await fetchPokemonDetails(id);
        if (pokemon) {
            pokemonDetailsElement.innerHTML = `
                <img src="${pokemon.image}" alt="${pokemon.name}">
                <p><strong>Nome:</strong> ${pokemon.name.toUpperCase()}</p>
                <p><strong>ID:</strong> #${pokemon.id}</p>
                <p><strong>Tipo(s):</strong> ${pokemon.types.join(', ')}</p>
                <p><strong>Altura:</strong> ${pokemon.height} m</p>
                <p><strong>Peso:</strong> ${pokemon.weight} kg</p>
            `;
            detailsModal.style.display = 'block';
        }
    }

    /**
     * Fun√ß√£o principal para carregar a lista de Pok√©mon
     * [cite_start](Requisito 1 [cite: 7][cite_start], Requisito 2 [cite: 8][cite_start], Requisito 6 [cite: 16][cite_start], Requisito 7 [cite: 17])
     */
    async function loadPokemon () {
        pokemonListElement.innerHTML = '';
        showMessage('Carregando Pok√©mon...'); [cite_start]// Requisito 7 [cite: 17]
        
        try {
            // <-- CORRE√á√ÉO 5: L√≥gica de fetch implementada (Req 1, 2, 6)
            
            if (isFilteringFavorites) {
                [cite_start]// Modo Favoritos (Requisito 6) [cite: 16]
                const favorites = getFavorites();
                prevButton.disabled = true;
                nextButton.disabled = true;

                if (favorites.length === 0) {
                    showMessage('Nenhum Pok√©mon favorito encontrado.', 'nenhum-resultado'); [cite_start]// Requisito 7 [cite: 17]
                    return;
                }
                
                // Busca os detalhes de cada favorito
                const detailPromises = favorites.map(id => fetchPokemonDetails(id));
                const pokemons = await Promise.all(detailPromises);
                pokemons.filter(p => p !== null).forEach(renderPokemonCard);

            } else {
                [cite_start]// Modo Lista Padr√£o (Requisito 1) [cite: 7, 8]
                const url = `${POKEAPI_BASE_URL}?limit=${POKEMON_LIMIT}&offset=${currentOffset}`;
                const response = await fetch(url);
                if (!response.ok) throw new Error('Falha ao buscar a lista de Pok√©mon.');

                const data = await response.json();

                // A API principal s√≥ retorna nome e URL,
                // ent√£o precisamos buscar detalhes (como imagem e tipo) para cada um.
                const detailPromises = data.results.map(p => fetchPokemonDetails(p.name));
                const pokemons = await Promise.all(detailPromises);
                
                pokemons.filter(p => p !== null).forEach(renderPokemonCard);

                [cite_start]// Requisito 2: Atualiza estado dos bot√µes [cite: 8]
                prevButton.disabled = !data.previous;
                nextButton.disabled = !data.next;
            }
            
            hideMessage();

        } catch (error) {
            console.error(error);
            showMessage('Erro ao carregar Pok√©mon. Tente novamente.', 'erro'); [cite_start]// Requisito 7 [cite: 17]
        }
    }

    /**
     * [cite_start]Fun√ß√£o para buscar um Pok√©mon espec√≠fico (Requisito 3) [cite: 9]
     */
    async function searchPokemon(query) {
        pokemonListElement.innerHTML = '';
        showMessage(`Buscando por "${query}"...`); [cite_start]// Requisito 7 [cite: 17]
        
        const pokemon = await fetchPokemonDetails(query.toLowerCase());
        
        if (pokemon) {
            renderPokemonCard(pokemon);
            hideMessage();
        } 
        // (A mensagem de 'n√£o encontrado' √© tratada dentro do fetchPokemonDetails)

        // Desabilita pagina√ß√£o na busca
        prevButton.disabled = true;
        nextButton.disabled = true;
    }


    // --- Event Listeners (CORRE√á√ÉO 6: Movidos para o escopo principal) ---

    [cite_start]// Requisito 2: Navega√ß√£o [cite: 8]
    nextButton.addEventListener('click', () => {
        currentOffset += POKEMON_LIMIT;
        // CORRE√á√ÉO 7: Chamada mantida
        loadPokemon();
    });

    prevButton.addEventListener('click', () => {
        if (currentOffset >= POKEMON_LIMIT) {
            currentOffset -= POKEMON_LIMIT;
            loadPokemon();
        }
    });

    [cite_start]// Requisito 3: Busca [cite: 9]
    searchButton.addEventListener('click', () => {
        // CORRE√á√ÉO 8: Propriedade '.value' (mantida)
        const query = searchInput.value.trim();
        if (query) {
            // <-- CORRE√á√ÉO 9: Implementada a chamada para a fun√ß√£o de busca
            searchPokemon(query);
        } else {
            // Se a busca for limpa, volta √† lista normal
            isFilteringFavorites = false; 
            currentOffset = 0;
            loadPokemon();
        }
    });
    // (Listener de 'Enter' na busca)
    searchInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            searchButton.click();
        }
    });


    [cite_start]// Requisito 6: Filtrar Favoritos [cite: 16]
    favoriteFilterButton.addEventListener('click', () => {
        // <-- CORRE√á√ÉO 10: L√≥gica de filtro implementada
        isFilteringFavorites = !isFilteringFavorites;
        currentOffset = 0; // Reseta a pagina√ß√£o
        
        if (isFilteringFavorites) {
            favoriteFilterButton.textContent = 'Mostrar Todos';
        } else {
            favoriteFilterButton.textContent = 'Mostrar Apenas Favoritos';
        }
        
        loadPokemon();
    });

    // Requisito 4: Fechar Modal
    closeButton.addEventListener('click', () => {
        detailsModal.style.display = 'none';
    });
    // (Fechar modal clicando fora)
    window.addEventListener('click', (e) => {
        if (e.target === detailsModal) {
            detailsModal.style.display = 'none';
        }
    });


    [cite_start]// Requisito 4 (Detalhes) [cite: 10] [cite_start]e 5 (Favoritar) [cite: 15]
    pokemonListElement.addEventListener('click', (e) => {
        const card = e.target.closest('.card_pokemon');
        // CORRE√á√ÉO 11: M√©todo '.closest()' (mantido)
        const favButton = e.target.closest('.botao_favoritar_card');

        if (favButton) {
            // <-- CORRE√á√ÉO 12: L√≥gica de favoritar implementada
            e.stopPropagation(); // Impede que o modal abra
            const id = favButton.dataset.id;
            toggleFavorite(id);
            
            // Atualiza a apar√™ncia do bot√£o instantaneamente
            favButton.classList.toggle('is-favorite');
            favButton.textContent = favButton.classList.contains('is-favorite') ? '‚ù§Ô∏è' : 'ü§ç';

        } else if (card) {
            // <-- CORRE√á√ÉO 13: L√≥gica de detalhes implementada
            const id = card.dataset.id;
            showPokemonDetails(id);
        }
    });

    // <-- CORRE√á√ÉO 14: Chamada inicial (mantida)
    [cite_start]// Requisito 1: Listar ao abrir a p√°gina [cite: 7]
    loadPokemon();

});